import numpy as np
import matplotlib.pyplot as plt

# Constantes
g = 9.81  # Aceleração devido à gravidade (m/s²)

# Função para calcular a posição do Objeto
def calcular_posicao(v0, angulo, tempo):
    """
    Calcula a posição (x, y) do Objeto no movimento parabólico
    v0: velocidade inicial (m/s)
    angulo: ângulo de lançamento (em graus)
    tempo: tempo (em segundos)
    """
    # Convertendo o ângulo de graus para radianos
    angulo_rad = np.radians(angulo)
    
    # Equações do movimento parabólico
    x = v0 * np.cos(angulo_rad) * tempo
    y = v0 * np.sin(angulo_rad) * tempo - 0.5 * g * tempo**2
    
    return x, y

# Função para calcular o momento angular
def calcular_momento_angular(massa, v0, angulo, tempo):
    """
    Calcula o momento angular do Objeto em relação ao ponto de origem.
    massa: massa do meteoro (kg)
    v0: velocidade inicial (m/s)
    angulo: ângulo de lançamento (em graus)
    tempo: tempo (em segundos)
    """
    # Distância do Objeto até a origem no tempo t
    x, y = calcular_posicao(v0, angulo, tempo)
    
    # Cálculo do momento angular (L = m * r * v)
    velocidade = np.sqrt(v0**2 - 2 * g * y)  # velocidade tangencial
    momento_angular = massa * np.sqrt(x**2 + y**2) * velocidade
    
    return momento_angular

# Função para simular a queda do Objeto
def simular_queda(v0, angulo, massa, tempo_max=10, intervalo=0.1):
    """
    Simula a trajetória do Objeto e calcula o momento angular ao longo do tempo.
    """
    tempos = np.arange(0, tempo_max, intervalo)
    coordenadas = []
    momentos_angulares = []

    for t in tempos:
        x, y = calcular_posicao(v0, angulo, t)
        coordenadas.append((x, y))
        
        # Calcula o momento angular em cada ponto
        momento_angular = calcular_momento_angular(massa, v0, angulo, t)
        momentos_angulares.append(momento_angular)
        
        # Se o Objeto atingiu o solo (y < 0), Stop
        if y < 0:
            break

    return np.array(coordenadas), np.array(momentos_angulares)

# Função para plotar a trajetória
def plotar_trajectoria(coordenadas, momentos_angulares):
    """
    Plota a trajetória do meteoro e o momento angular ao longo do tempo.
    """
    plt.figure(figsize=(12, 6))
    
    # Subgráfico para a trajetória
    plt.subplot(1, 2, 1)
    plt.plot(coordenadas[:, 0], coordenadas[:, 1], label="Trajetória do Objeto")
    plt.title("Trajetória de Queda do Objeto")
    plt.xlabel("Distância Horizontal (m)")
    plt.ylabel("Altura (m)")
    plt.grid(True)
    plt.legend()
    
    # Subgráfico para o momento angular
    plt.subplot(1, 2, 2)
    plt.plot(momentos_angulares, label="Momento Angular")
    plt.title("Momento Angular ao Longo do Tempo")
    plt.xlabel("Tempo (s)")
    plt.ylabel("Momento Angular (kg·m²/s)")
    plt.grid(True)
    plt.legend()
    
    plt.tight_layout()
    plt.show()

# Função principal para interagir com o usuário
def main():
    # Entrada do usuário
    print("Simulação de Queda de Objeto")
    v0 = float(input("Digite a velocidade inicial (v0) do Objeto em m/s: "))
    angulo = float(input("Digite o ângulo de lançamento (θ) em graus: "))
    massa = float(input("Digite a massa do Objeto em kg: "))
    
    # Simular a queda
    coordenadas, momentos_angulares = simular_queda(v0, angulo, massa)
    
    # Plotar os resultados
    plotar_trajectoria(coordenadas, momentos_angulares)
    
    # Exibir as coordenadas finais (quando o Objeto atinge o solo)
    print(f"\nCoordenadas finais (quando o Objeto atinge o solo):")
    print(f"x = {coordenadas[-1, 0]:.2f} m, y = {coordenadas[-1, 1]:.2f} m")
    print(f"Momento angular no final: {momentos_angulares[-1]:.2f} kg·m²/s")

# Executar o programa
if __name__ == "__main__":
    main()
